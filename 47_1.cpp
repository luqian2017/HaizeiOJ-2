#include <iostream>
using namespace std;
/*压缩维度
 * 1、因为 第x件物品的状态只于前一行数据相关，所以压缩
 * 2、压缩后数组要从后往前计算,防止在计算x的状态时，前面需要的x-1状态已经被更新*/
int all, n, w[105], v[105], ans[105]; //状态定义，前x件物品，背包容量为y时的最大价值


int main() {
    cin >> all >> n;
    for (int i = 1; i <= n; i++) { //从1开始存，可以避免访问x-1时出现访问越界，同时也让第一行不够买时，从上一行抄下来的数是0
        cin >> w[i] >> v[i];
    }
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j > 0; j--) { //必须从后往前算，因为用的一维数组，从后往前算才不会出现，用x件物品的情况去推算x-1件物品的情况，而是用x-1的状态去推x件物品的状态
            if (j < w[i]) { //买不起
                //ans[i][j] = [j];
                break; //因为是从后往前算，后面都买不起了，前面肯定也一样，直接跳出即可
            } else { //买得起，买得起的情况下又分两种情况，我可拿可，我也可不拿，选其中价值大的那个
                ans[j] = max(ans[j], v[i] + ans[j - w[i]]);
            }
        }
    }
    cout << [all] << endl;
    return 0;
}
